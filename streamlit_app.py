import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# URLs de los datos
rendimiento_url = 'https://raw.githubusercontent.com/ElsincejasWasaaaaa/data/main/Tabladerendimientoacademico1.csv'
satisfaccion_url = 'https://raw.githubusercontent.com/ElsincejasWasaaaaa/data/main/ComparativaDeSatisfaccionEstudiantil1.csv' 

# Cargar datos
df_rendimiento = pd.read_csv(rendimiento_url)
df_satisfaccion = pd.read_csv(satisfaccion_url)

def main():
    #Parte mia xd (Guido)
    st.title("An치lisis Acad칠mico y Estudiantil 游늵")
    # Sidebar para selecci칩n de secci칩n
    with st.sidebar:
        st.header("Selecciona el An치lisis")
        analisis = st.radio("Opciones", ["Rendimiento Acad칠mico", "Satisfacci칩n y Retenci칩n", "Relaci칩n Uso y Rendimiento", "Gr치fico de Pastel - Satisfacci칩n"])

    if analisis == "Rendimiento Acad칠mico":
        st.header("Comparativa de Rendimiento Acad칠mico")
        st.info("Comparaci칩n del rendimiento acad칠mico de los estudiantes entre a침os seleccionados.")
        
        # Sidebar para selecci칩n de filtros
        with st.sidebar:
            st.subheader("Opciones de Filtro (Rendimiento)")
            videojuego_seleccionado = st.selectbox("Selecciona el Videojuego Educativo", df_rendimiento['videjueg_Educativo'].unique())
            anio_inicio = st.selectbox("A침o de Inicio", sorted(df_rendimiento['a침o'].unique()))
            anio_fin = st.selectbox("A침o de Fin", sorted(df_rendimiento['a침o'].unique()))

        # Filtrar datos
        df_filtrado = df_rendimiento[
            (df_rendimiento['videjueg_Educativo'] == videojuego_seleccionado) & 
            (df_rendimiento['a침o'].isin([anio_inicio, anio_fin]))
        ]

        # Mostrar la tabla filtrada
        with st.expander("Tabla de Rendimiento Acad칠mico Filtrada"):
            st.dataframe(df_filtrado)

        # Gr치fico de barras comparativo
        if st.button("Mostrar Comparativa de Rendimiento Acad칠mico"):
            fig, ax = plt.subplots()
            rendimiento_por_universidad_anio = df_filtrado.groupby(['universidad', 'a침o'])['Rendimiento_Promedio'].mean().unstack()
            rendimiento_por_universidad_anio.plot(kind='bar', ax=ax)
            ax.set_xlabel("Universidad")
            ax.set_ylabel("Rendimiento Promedio")
            ax.set_title(f"Comparativa de Rendimiento Acad칠mico en {anio_inicio} y {anio_fin}")
            ax.legend(title="A침o")
            st.pyplot(fig)

    #Parte de Yair
    elif analisis == "Satisfacci칩n y Retenci칩n":
        st.header("Comparativa de Satisfacci칩n y Retenci칩n Estudiantil")
        
        # Sidebar para selecci칩n de filtros
        with st.sidebar:
            st.subheader("Opciones de Filtro (Satisfacci칩n y Retenci칩n)")
            uni1 = st.selectbox("Universidad 1", options=["UPC", "PUCP", "UNMSM"], index=0)
            uni2 = st.selectbox("Universidad 2 (diferente a la 1)", options=["UPC", "PUCP", "UNMSM"], index=1)
            anio_inicio = st.selectbox("A침o de Inicio", options=[2015, 2016, 2017, 2018, 2019, 2020, 2021], index=0)
            anio_fin = st.selectbox("A침o de Fin", options=[2015, 2016, 2017, 2018, 2019, 2020, 2021], index=6)

        if uni1 == uni2:
            st.error("Universidad 1 y Universidad 2 no deben ser iguales.")
        elif anio_inicio > anio_fin:
            st.error("El a침o de inicio debe ser menor o igual al a침o de fin.")
        else:
            universidades = [uni1, uni2]
            filtered_data = df_satisfaccion[
                (df_satisfaccion['Universidad'].isin(universidades)) & 
                (df_satisfaccion['A침o'].between(anio_inicio, anio_fin))
            ]
            if filtered_data.empty:
                st.warning("No hay datos para los filtros seleccionados.")
            else:
                filtered_data['Etiqueta'] = filtered_data['A침o'].astype(str) + '-' + filtered_data['Universidad']
                filtered_data = filtered_data.sort_values(by=['A침o', 'Universidad'])
                etiquetas = filtered_data['Etiqueta']
                satisfaccion = filtered_data['Satisfaccion']
                retencion = filtered_data['Retencion']
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.bar(etiquetas, satisfaccion, label='Satisfacci칩n', color='blue')
                ax.bar(etiquetas, retencion, bottom=satisfaccion, label='Retenci칩n', color='orange')
                ax.set_xlabel('Universidad y A침o')
                ax.set_ylabel('Porcentaje (%)')
                ax.set_title(f'Comparativa de Satisfacci칩n y Retenci칩n ({anio_inicio}-{anio_fin})')
                ax.legend()
                plt.xticks(rotation=45, ha='right')
                plt.tight_layout()
                st.pyplot(fig)

    #Parte de Alvaro:
    elif analisis == "Relaci칩n Uso y Rendimiento":
        st.header("Relaci칩n entre Uso de Videojuegos y Rendimiento Acad칠mico")
        
        # Crear datos para el an치lisis
        datos = {
            'Estudiantes Usando': [200, 150, 100, 220, 160, 110, 250, 180, 120, 230],
            'Rendimiento Promedio (%)': [75, 70, 80, 78, 72, 82, 80, 74, 85, 82],
            'Videojuego': ['MathQuest', 'SciExplorers', 'LitAdventure', 'MathQuest', 'SciExplorers', 
                           'LitAdventure', 'MathQuest', 'SciExplorers', 'LitAdventure', 'MathQuest']
        }

        df = pd.DataFrame(datos)

        # Colores personalizados para los videojuegos
        colores = {'MathQuest': 'red', 'SciExplorers': 'blue', 'LitAdventure': 'green'}

        # Crear gr치fico de dispersi칩n con Seaborn
        plt.figure(figsize=(10, 6))
        sns.scatterplot(
            x='Estudiantes Usando',
            y='Rendimiento Promedio (%)',
            data=df,
            hue='Videojuego',
            palette=colores,
            s=100,
            edgecolor='black'
        )

        plt.title('Relaci칩n entre Uso de Videojuegos y Rendimiento Acad칠mico')
        plt.xlabel('N칰mero de Estudiantes Usando Videojuegos')
        plt.ylabel('Rendimiento Promedio (%)')
        plt.legend(title='Videojuego')
        st.pyplot(plt)

    elif analisis == "Gr치fico de Pastel - Satisfacci칩n":
        st.header("Distribuci칩n de Satisfacci칩n Estudiantil por A침o y Universidad")
    
        # Sidebar para filtros
        with st.sidebar:
            st.subheader("Opciones de Filtro (Gr치fico de Pastel)")
            anio_seleccionado = st.selectbox("Selecciona el A침o", df_satisfaccion['A침o'].unique())
            universidad_seleccionada = st.selectbox("Selecciona la Universidad", df_satisfaccion['Universidad'].unique())
    
    # Filtrar datos por el a침o seleccionado
        datos_filtrados = df_satisfaccion[df_satisfaccion['A침o'] == anio_seleccionado]
    
    # Verificar si hay datos para ese a침o
        if datos_filtrados.empty:
            st.warning("No hay datos disponibles para el a침o seleccionado.")
        else:
        # Preparar datos para el gr치fico
            labels = datos_filtrados['Universidad']
            sizes = datos_filtrados['Satisfaccion']
            explode = [0.1 if uni == universidad_seleccionada else 0 for uni in labels]  # Resaltar la universidad seleccionada

        # Crear el gr치fico de pastel
            fig, ax = plt.subplots()
            ax.pie(
                sizes, labels=labels, explode=explode, autopct='%1.1f%%', 
                startangle=90, colors=['#ff9999', '#66b3ff', '#99ff99']
            )
            ax.axis('equal')  # Asegurar que el pastel sea circular
            ax.set_title(f"Distribuci칩n de Satisfacci칩n en {anio_seleccionado}")

        # Mostrar el gr치fico
            st.pyplot(fig)

if __name__ == "__main__":
    main()
